// <auto-generated />
using System;
using Balance.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(BalanceDbContext))]
    [Migration("20250812163152_ShipmentStatus")]
    partial class ShipmentStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Balance.Models.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Balance.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Balance.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrder")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrder")
                        .IsUnique()
                        .HasFilter("[PurchaseOrder] IS NOT NULL");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Balance.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Balance.Models.ResourceReciept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitId");

                    b.ToTable("ResourceReciepts");
                });

            modelBuilder.Entity("Balance.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<string>("PurchaseOrder")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PurchaseOrder")
                        .IsUnique()
                        .HasFilter("[PurchaseOrder] IS NOT NULL");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Balance.Models.ShipmentResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("UnitId");

                    b.ToTable("ShipmentResources");
                });

            modelBuilder.Entity("Balance.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Balance.Models.Balance", b =>
                {
                    b.HasOne("Balance.Models.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Balance.Models.Unit", "Unit")
                        .WithMany("Balances")
                        .HasForeignKey("UnitId");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Balance.Models.ResourceReciept", b =>
                {
                    b.HasOne("Balance.Models.Receipt", "Receipt")
                        .WithMany("ResourceReciepts")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("Balance.Models.Resource", "Resource")
                        .WithMany("ResourceReciepts")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Balance.Models.Unit", "Unit")
                        .WithMany("ResourceReciepts")
                        .HasForeignKey("UnitId");

                    b.Navigation("Receipt");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Balance.Models.Shipment", b =>
                {
                    b.HasOne("Balance.Models.Customer", "Customer")
                        .WithMany("Shipments")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Balance.Models.ShipmentResource", b =>
                {
                    b.HasOne("Balance.Models.Resource", "Resource")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Balance.Models.Shipment", "Shipment")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("Balance.Models.Unit", "Unit")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("UnitId");

                    b.Navigation("Resource");

                    b.Navigation("Shipment");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Balance.Models.Customer", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Balance.Models.Receipt", b =>
                {
                    b.Navigation("ResourceReciepts");
                });

            modelBuilder.Entity("Balance.Models.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ResourceReciepts");

                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("Balance.Models.Shipment", b =>
                {
                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("Balance.Models.Unit", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ResourceReciepts");

                    b.Navigation("ShipmentResources");
                });
#pragma warning restore 612, 618
        }
    }
}
